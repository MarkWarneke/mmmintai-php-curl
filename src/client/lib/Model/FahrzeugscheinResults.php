<?php
/**
 * FahrzeugscheinResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MMMint.ai - Registration Recognition API
 *
 * ## General Information   This API is hosted by MMM Intelligence UG (haftungsbeschrÃ¤nkt) providing smart solutions, [imprint](https://mmmint.ai/impressum).   ## Support   For support reach out to [support@mmmint.ai](mailto:support@mmmint.ai). For usage of the registration recognition API an **APIKey** (`access_token`) is required.   ## Usage Information   1. In order to use the registration recognition API you start by submitting an image via file upload, or with a publicly accessible image of the registration, using a `POST` to `/fahrzeugschein`.   1. The asynchronous processing of the the recognition can be checked using the `/fahrzeugschein/status/{sessionId}` resource.   1. After the status is `finished`, the recognized data can be retrieved using `/fahrzeugschein/{id}` resource.   1. The bounding boxes and associated cropped images can be retrieved using the `/detection` resources.   1. To retrieve all sessions for the submitted registration use the `/session` resource. The sessions will also indicate the status of all submissions.   ## Encryption Information   The provided service is hosted in german datacenters. Submitted data is encrypted in transit and at rest. The submitted date can only be accessed using the used APIKey.   ## Security Information   In case of a leaked APIKey reach out to us immediately. All submitted data can be deleted upon request within 30 days upon notice.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FahrzeugscheinResults Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FahrzeugscheinResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FahrzeugscheinResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vorname' => 'string',
'nachname' => 'string',
'strasse' => 'string',
'plz' => 'string',
'stadt' => 'string',
'kennzeichen' => 'string',
'identifizierungsnummer' => 'string',
'hu_jahr' => 'string',
'hu_monat' => 'string',
'erstzulassung_tag' => 'string',
'erstzulassung_monat' => 'string',
'erstzulassung_jahr' => 'string',
'codehersteller' => 'string',
'codetyp' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vorname' => null,
'nachname' => null,
'strasse' => null,
'plz' => null,
'stadt' => null,
'kennzeichen' => null,
'identifizierungsnummer' => null,
'hu_jahr' => null,
'hu_monat' => null,
'erstzulassung_tag' => null,
'erstzulassung_monat' => null,
'erstzulassung_jahr' => null,
'codehersteller' => null,
'codetyp' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vorname' => 'vorname',
'nachname' => 'nachname',
'strasse' => 'strasse',
'plz' => 'plz',
'stadt' => 'stadt',
'kennzeichen' => 'kennzeichen',
'identifizierungsnummer' => 'identifizierungsnummer',
'hu_jahr' => 'hu_jahr',
'hu_monat' => 'hu_monat',
'erstzulassung_tag' => 'erstzulassung_tag',
'erstzulassung_monat' => 'erstzulassung_monat',
'erstzulassung_jahr' => 'erstzulassung_jahr',
'codehersteller' => 'codehersteller',
'codetyp' => 'codetyp'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vorname' => 'setVorname',
'nachname' => 'setNachname',
'strasse' => 'setStrasse',
'plz' => 'setPlz',
'stadt' => 'setStadt',
'kennzeichen' => 'setKennzeichen',
'identifizierungsnummer' => 'setIdentifizierungsnummer',
'hu_jahr' => 'setHuJahr',
'hu_monat' => 'setHuMonat',
'erstzulassung_tag' => 'setErstzulassungTag',
'erstzulassung_monat' => 'setErstzulassungMonat',
'erstzulassung_jahr' => 'setErstzulassungJahr',
'codehersteller' => 'setCodehersteller',
'codetyp' => 'setCodetyp'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vorname' => 'getVorname',
'nachname' => 'getNachname',
'strasse' => 'getStrasse',
'plz' => 'getPlz',
'stadt' => 'getStadt',
'kennzeichen' => 'getKennzeichen',
'identifizierungsnummer' => 'getIdentifizierungsnummer',
'hu_jahr' => 'getHuJahr',
'hu_monat' => 'getHuMonat',
'erstzulassung_tag' => 'getErstzulassungTag',
'erstzulassung_monat' => 'getErstzulassungMonat',
'erstzulassung_jahr' => 'getErstzulassungJahr',
'codehersteller' => 'getCodehersteller',
'codetyp' => 'getCodetyp'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vorname'] = isset($data['vorname']) ? $data['vorname'] : null;
        $this->container['nachname'] = isset($data['nachname']) ? $data['nachname'] : null;
        $this->container['strasse'] = isset($data['strasse']) ? $data['strasse'] : null;
        $this->container['plz'] = isset($data['plz']) ? $data['plz'] : null;
        $this->container['stadt'] = isset($data['stadt']) ? $data['stadt'] : null;
        $this->container['kennzeichen'] = isset($data['kennzeichen']) ? $data['kennzeichen'] : null;
        $this->container['identifizierungsnummer'] = isset($data['identifizierungsnummer']) ? $data['identifizierungsnummer'] : null;
        $this->container['hu_jahr'] = isset($data['hu_jahr']) ? $data['hu_jahr'] : null;
        $this->container['hu_monat'] = isset($data['hu_monat']) ? $data['hu_monat'] : null;
        $this->container['erstzulassung_tag'] = isset($data['erstzulassung_tag']) ? $data['erstzulassung_tag'] : null;
        $this->container['erstzulassung_monat'] = isset($data['erstzulassung_monat']) ? $data['erstzulassung_monat'] : null;
        $this->container['erstzulassung_jahr'] = isset($data['erstzulassung_jahr']) ? $data['erstzulassung_jahr'] : null;
        $this->container['codehersteller'] = isset($data['codehersteller']) ? $data['codehersteller'] : null;
        $this->container['codetyp'] = isset($data['codetyp']) ? $data['codetyp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vorname'] === null) {
            $invalidProperties[] = "'vorname' can't be null";
        }
        if ($this->container['nachname'] === null) {
            $invalidProperties[] = "'nachname' can't be null";
        }
        if ($this->container['strasse'] === null) {
            $invalidProperties[] = "'strasse' can't be null";
        }
        if ($this->container['plz'] === null) {
            $invalidProperties[] = "'plz' can't be null";
        }
        if ($this->container['stadt'] === null) {
            $invalidProperties[] = "'stadt' can't be null";
        }
        if ($this->container['kennzeichen'] === null) {
            $invalidProperties[] = "'kennzeichen' can't be null";
        }
        if ($this->container['identifizierungsnummer'] === null) {
            $invalidProperties[] = "'identifizierungsnummer' can't be null";
        }
        if ($this->container['hu_jahr'] === null) {
            $invalidProperties[] = "'hu_jahr' can't be null";
        }
        if ($this->container['hu_monat'] === null) {
            $invalidProperties[] = "'hu_monat' can't be null";
        }
        if ($this->container['erstzulassung_tag'] === null) {
            $invalidProperties[] = "'erstzulassung_tag' can't be null";
        }
        if ($this->container['erstzulassung_monat'] === null) {
            $invalidProperties[] = "'erstzulassung_monat' can't be null";
        }
        if ($this->container['erstzulassung_jahr'] === null) {
            $invalidProperties[] = "'erstzulassung_jahr' can't be null";
        }
        if ($this->container['codehersteller'] === null) {
            $invalidProperties[] = "'codehersteller' can't be null";
        }
        if ($this->container['codetyp'] === null) {
            $invalidProperties[] = "'codetyp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vorname
     *
     * @return string
     */
    public function getVorname()
    {
        return $this->container['vorname'];
    }

    /**
     * Sets vorname
     *
     * @param string $vorname vorname
     *
     * @return $this
     */
    public function setVorname($vorname)
    {
        $this->container['vorname'] = $vorname;

        return $this;
    }

    /**
     * Gets nachname
     *
     * @return string
     */
    public function getNachname()
    {
        return $this->container['nachname'];
    }

    /**
     * Sets nachname
     *
     * @param string $nachname nachname
     *
     * @return $this
     */
    public function setNachname($nachname)
    {
        $this->container['nachname'] = $nachname;

        return $this;
    }

    /**
     * Gets strasse
     *
     * @return string
     */
    public function getStrasse()
    {
        return $this->container['strasse'];
    }

    /**
     * Sets strasse
     *
     * @param string $strasse strasse
     *
     * @return $this
     */
    public function setStrasse($strasse)
    {
        $this->container['strasse'] = $strasse;

        return $this;
    }

    /**
     * Gets plz
     *
     * @return string
     */
    public function getPlz()
    {
        return $this->container['plz'];
    }

    /**
     * Sets plz
     *
     * @param string $plz plz
     *
     * @return $this
     */
    public function setPlz($plz)
    {
        $this->container['plz'] = $plz;

        return $this;
    }

    /**
     * Gets stadt
     *
     * @return string
     */
    public function getStadt()
    {
        return $this->container['stadt'];
    }

    /**
     * Sets stadt
     *
     * @param string $stadt stadt
     *
     * @return $this
     */
    public function setStadt($stadt)
    {
        $this->container['stadt'] = $stadt;

        return $this;
    }

    /**
     * Gets kennzeichen
     *
     * @return string
     */
    public function getKennzeichen()
    {
        return $this->container['kennzeichen'];
    }

    /**
     * Sets kennzeichen
     *
     * @param string $kennzeichen kennzeichen
     *
     * @return $this
     */
    public function setKennzeichen($kennzeichen)
    {
        $this->container['kennzeichen'] = $kennzeichen;

        return $this;
    }

    /**
     * Gets identifizierungsnummer
     *
     * @return string
     */
    public function getIdentifizierungsnummer()
    {
        return $this->container['identifizierungsnummer'];
    }

    /**
     * Sets identifizierungsnummer
     *
     * @param string $identifizierungsnummer identifizierungsnummer
     *
     * @return $this
     */
    public function setIdentifizierungsnummer($identifizierungsnummer)
    {
        $this->container['identifizierungsnummer'] = $identifizierungsnummer;

        return $this;
    }

    /**
     * Gets hu_jahr
     *
     * @return string
     */
    public function getHuJahr()
    {
        return $this->container['hu_jahr'];
    }

    /**
     * Sets hu_jahr
     *
     * @param string $hu_jahr hu_jahr
     *
     * @return $this
     */
    public function setHuJahr($hu_jahr)
    {
        $this->container['hu_jahr'] = $hu_jahr;

        return $this;
    }

    /**
     * Gets hu_monat
     *
     * @return string
     */
    public function getHuMonat()
    {
        return $this->container['hu_monat'];
    }

    /**
     * Sets hu_monat
     *
     * @param string $hu_monat hu_monat
     *
     * @return $this
     */
    public function setHuMonat($hu_monat)
    {
        $this->container['hu_monat'] = $hu_monat;

        return $this;
    }

    /**
     * Gets erstzulassung_tag
     *
     * @return string
     */
    public function getErstzulassungTag()
    {
        return $this->container['erstzulassung_tag'];
    }

    /**
     * Sets erstzulassung_tag
     *
     * @param string $erstzulassung_tag erstzulassung_tag
     *
     * @return $this
     */
    public function setErstzulassungTag($erstzulassung_tag)
    {
        $this->container['erstzulassung_tag'] = $erstzulassung_tag;

        return $this;
    }

    /**
     * Gets erstzulassung_monat
     *
     * @return string
     */
    public function getErstzulassungMonat()
    {
        return $this->container['erstzulassung_monat'];
    }

    /**
     * Sets erstzulassung_monat
     *
     * @param string $erstzulassung_monat erstzulassung_monat
     *
     * @return $this
     */
    public function setErstzulassungMonat($erstzulassung_monat)
    {
        $this->container['erstzulassung_monat'] = $erstzulassung_monat;

        return $this;
    }

    /**
     * Gets erstzulassung_jahr
     *
     * @return string
     */
    public function getErstzulassungJahr()
    {
        return $this->container['erstzulassung_jahr'];
    }

    /**
     * Sets erstzulassung_jahr
     *
     * @param string $erstzulassung_jahr erstzulassung_jahr
     *
     * @return $this
     */
    public function setErstzulassungJahr($erstzulassung_jahr)
    {
        $this->container['erstzulassung_jahr'] = $erstzulassung_jahr;

        return $this;
    }

    /**
     * Gets codehersteller
     *
     * @return string
     */
    public function getCodehersteller()
    {
        return $this->container['codehersteller'];
    }

    /**
     * Sets codehersteller
     *
     * @param string $codehersteller codehersteller
     *
     * @return $this
     */
    public function setCodehersteller($codehersteller)
    {
        $this->container['codehersteller'] = $codehersteller;

        return $this;
    }

    /**
     * Gets codetyp
     *
     * @return string
     */
    public function getCodetyp()
    {
        return $this->container['codetyp'];
    }

    /**
     * Sets codetyp
     *
     * @param string $codetyp codetyp
     *
     * @return $this
     */
    public function setCodetyp($codetyp)
    {
        $this->container['codetyp'] = $codetyp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
